(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{55:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据类型")]),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),a("p",[t._v("JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 又新增了第七种 Symbol 类型的值，本教程不涉及。）")]),a("ul",[a("li",[t._v("数值（number）：整数和小数（比如"),a("code",[t._v("1")]),t._v("和"),a("code",[t._v("3.14")]),t._v("）")]),a("li",[t._v("字符串（string）：文本（比如"),a("code",[t._v("Hello World")]),t._v("）。")]),a("li",[t._v("布尔值（boolean）：表示真伪的两个特殊值，即"),a("code",[t._v("true")]),t._v("（真）和"),a("code",[t._v("false")]),t._v("（假）")]),a("li",[a("code",[t._v("undefined")]),t._v("：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值")]),a("li",[a("code",[t._v("null")]),t._v("：表示空值，即此处的值为空。")]),a("li",[t._v("对象（object）：各种值组成的集合。")])]),a("p",[t._v("通常，数值、字符串、布尔值这三种类型，合称为原始类型（primitive type）的值，即它们是最基本的数据类型，不能再细分了。对象则称为合成类型（complex type）的值，因为一个对象往往是多个原始类型的值的合成，可以看作是一个存放各种值的容器。至于"),a("code",[t._v("undefined")]),t._v("和"),a("code",[t._v("null")]),t._v("，一般将它们看成两个特殊值。")]),a("p",[t._v("对象是最复杂的数据类型，又可以分成三个子类型。")]),a("ul",[a("li",[t._v("狭义的对象（object）")]),a("li",[t._v("数组（array）")]),a("li",[t._v("函数（function）")])]),a("p",[t._v("狭义的对象和数组是两种不同的数据组合方式，除非特别声明，本教程的”对象“都特指狭义的对象。函数其实是处理数据的方法，JavaScript 把它当成一种数据类型，可以赋值给变量，这为编程带来了很大的灵活性，也为 JavaScript 的“函数式编程”奠定了基础。")]),a("h2",{attrs:{id:"typeof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" typeof 运算符")]),a("p",[t._v("JavaScript 有三种方法，可以确定一个值到底是什么类型。")]),a("ul",[a("li",[a("code",[t._v("typeof")]),t._v("运算符")]),a("li",[a("code",[t._v("instanceof")]),t._v("运算符")]),a("li",[a("code",[t._v("Object.prototype.toString")]),t._v("方法")])]),a("p",[a("code",[t._v("instanceof")]),t._v("运算符和"),a("code",[t._v("Object.prototype.toString")]),t._v("方法，将在后文介绍。这里介绍"),a("code",[t._v("typeof")]),t._v("运算符。")]),a("p",[a("code",[t._v("typeof")]),t._v("运算符可以返回一个值的数据类型。")]),a("p",[t._v("数值、字符串、布尔值分别返回"),a("code",[t._v("number")]),t._v("、"),a("code",[t._v("string")]),t._v("、"),a("code",[t._v("boolean")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "number"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'123'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "string"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "boolean"')]),t._v("\n")])]),a("p",[t._v("函数返回"),a("code",[t._v("function")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" f\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "function"')]),t._v("\n")])]),a("p",[a("code",[t._v("undefined")]),t._v("返回"),a("code",[t._v("undefined")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" undefined\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n")])]),a("p",[t._v("利用这一点，"),a("code",[t._v("typeof")]),t._v("可以用来检查一个没有声明的变量，而不报错。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("v\n"),a("span",{attrs:{class:"token comment"}},[t._v("// ReferenceError: v is not defined")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" v\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n")])]),a("p",[t._v("上面代码中，变量"),a("code",[t._v("v")]),t._v("没有用"),a("code",[t._v("var")]),t._v("命令声明，直接使用就会报错。但是，放在"),a("code",[t._v("typeof")]),t._v("后面，就不报错了，而是返回"),a("code",[t._v("undefined")]),t._v("。")]),a("p",[t._v("实际编程中，这个特点通常用在判断语句。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 错误的写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// ReferenceError: v is not defined")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正确的写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"undefined"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("对象返回"),a("code",[t._v("object")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" window "),a("span",{attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n")])]),a("p",[t._v("上面代码中，空数组（"),a("code",[t._v("[]")]),t._v("）的类型也是"),a("code",[t._v("object")]),t._v("，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，"),a("code",[t._v("instanceof")]),t._v("运算符可以区分数组和对象。"),a("code",[t._v("instanceof")]),t._v("运算符的详细解释，请见《面向对象编程》一章。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\no "),a("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Array")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\na "),a("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Array")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[a("code",[t._v("null")]),t._v("返回"),a("code",[t._v("object")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "object"')]),t._v("\n")])]),a("p",[a("code",[t._v("null")]),t._v("的类型是"),a("code",[t._v("object")]),t._v("，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑"),a("code",[t._v("null")]),t._v("，只把它当作"),a("code",[t._v("object")]),t._v("的一种特殊值。后来"),a("code",[t._v("null")]),t._v("独立出来，作为一种单独的数据类型，为了兼容以前的代码，"),a("code",[t._v("typeof null")]),t._v("返回"),a("code",[t._v("object")]),t._v("就没法改变了。")]),a("h2",{attrs:{id:"null-和-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined","aria-hidden":"true"}},[t._v("#")]),t._v(" null 和 undefined")]),a("h3",{attrs:{id:"概述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),a("p",[a("code",[t._v("null")]),t._v("与"),a("code",[t._v("undefined")]),t._v("都可以表示“没有”，含义非常相似。将一个变量赋值为"),a("code",[t._v("undefined")]),t._v("或"),a("code",[t._v("null")]),t._v("，老实说，语法效果几乎没区别。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 或者")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("p",[t._v("上面代码中，变量"),a("code",[t._v("a")]),t._v("分别被赋值为"),a("code",[t._v("undefined")]),t._v("和"),a("code",[t._v("null")]),t._v("，这两种写法的效果几乎等价。")]),a("p",[t._v("在"),a("code",[t._v("if")]),t._v("语句中，它们都会被自动转为"),a("code",[t._v("false")]),t._v("，相等运算符（"),a("code",[t._v("==")]),t._v("）甚至直接报告两者相等。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'undefined is false'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// undefined is false")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'null is false'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// null is false")]),t._v("\n\nundefined "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("从上面代码可见，两者的行为是何等相似！谷歌公司开发的 JavaScript 语言的替代品 Dart 语言，就明确规定只有"),a("code",[t._v("null")]),t._v("，没有"),a("code",[t._v("undefined")]),t._v("！")]),a("p",[t._v("既然含义与用法都差不多，为什么要同时设置两个这样的值，这不是无端增加复杂度，令初学者困扰吗？这与历史原因有关。")]),a("p",[t._v("1995年 JavaScript 诞生时，最初像 Java 一样，只设置了"),a("code",[t._v("null")]),t._v('表示"无"。根据 C 语言的传统，'),a("code",[t._v("null")]),t._v("可以自动转为"),a("code",[t._v("0")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("null")]),t._v("转为数字时，自动变成0。")]),a("p",[t._v("但是，JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，"),a("code",[t._v("null")]),t._v("就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果"),a("code",[t._v("null")]),t._v("自动转为0，很不容易发现错误。")]),a("p",[t._v("因此，他又设计了一个"),a("code",[t._v("undefined")]),t._v("。区别是这样的："),a("code",[t._v("null")]),t._v("是一个表示“空”的对象，转为数值时为"),a("code",[t._v("0")]),t._v("；"),a("code",[t._v("undefined")]),t._v('是一个表示"此处无定义"的原始值，转为数值时为'),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" undefined "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("h3",{attrs:{id:"用法和含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法和含义","aria-hidden":"true"}},[t._v("#")]),t._v(" 用法和含义")]),a("p",[t._v("对于"),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("，大致可以像下面这样理解。")]),a("p",[a("code",[t._v("null")]),t._v("表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入"),a("code",[t._v("null")]),t._v("，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入"),a("code",[t._v("null")]),t._v("，表示未发生错误。")]),a("p",[a("code",[t._v("undefined")]),t._v("表示“未定义”，下面是返回"),a("code",[t._v("undefined")]),t._v("的典型场景。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 变量声明了，但没有赋值")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 调用函数时，应该提供的参数没有提供，该参数等于 undefined")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对象没有赋值的属性")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v("  o "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\no"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 函数没有返回值时，默认返回 undefined")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("f")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])]),a("h2",{attrs:{id:"布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值","aria-hidden":"true"}},[t._v("#")]),t._v(" 布尔值")]),a("p",[t._v("布尔值代表“真”和“假”两个状态。“真”用关键字"),a("code",[t._v("true")]),t._v("表示，“假”用关键字"),a("code",[t._v("false")]),t._v("表示。布尔值只有这两个值。")]),a("p",[t._v("下列运算符会返回布尔值：")]),a("ul",[a("li",[t._v("两元逻辑运算符： "),a("code",[t._v("&&")]),t._v(" (And)，"),a("code",[t._v("||")]),t._v(" (Or)")]),a("li",[t._v("前置逻辑运算符： "),a("code",[t._v("!")]),t._v(" (Not)")]),a("li",[t._v("相等运算符："),a("code",[t._v("===")]),t._v("，"),a("code",[t._v("!==")]),t._v("，"),a("code",[t._v("==")]),t._v("，"),a("code",[t._v("!=")])]),a("li",[t._v("比较运算符："),a("code",[t._v(">")]),t._v("，"),a("code",[t._v(">=")]),t._v("，"),a("code",[t._v("<")]),t._v("，"),a("code",[t._v("<=")])])]),a("p",[t._v("如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为"),a("code",[t._v("false")]),t._v("，其他值都视为"),a("code",[t._v("true")]),t._v("。")]),a("ul",[a("li",[a("code",[t._v("undefined")])]),a("li",[a("code",[t._v("null")])]),a("li",[a("code",[t._v("false")])]),a("li",[a("code",[t._v("0")])]),a("li",[a("code",[t._v("NaN")])]),a("li",[a("code",[t._v('""')]),t._v("或"),a("code",[t._v("''")]),t._v("（空字符串）")])]),a("p",[t._v("布尔值往往用于程序流程的控制，请看一个例子。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'true'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 没有任何输出")]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("if")]),t._v("命令后面的判断条件，预期应该是一个布尔值，所以 JavaScript 自动将空字符串，转为布尔值"),a("code",[t._v("false")]),t._v("，导致程序不会进入代码块，所以没有任何输出。")]),a("p",[t._v("注意，空数组（"),a("code",[t._v("[]")]),t._v("）和空对象（"),a("code",[t._v("{}")]),t._v("）对应的布尔值，都是"),a("code",[t._v("true")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'true'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'true'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("更多关于数据类型转换的介绍，参见《数据类型转换》一章。")])])}],!1,null,null,null);s.default=e.exports}}]);