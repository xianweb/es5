(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{56:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值")]),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 概述")]),a("h3",{attrs:{id:"整数和浮点数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整数和浮点数","aria-hidden":"true"}},[t._v("#")]),t._v(" 整数和浮点数")]),a("p",[t._v("JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此。所以，"),a("code",[t._v("1")]),t._v("与"),a("code",[t._v("1.0")]),t._v("是相同的，是同一个数。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1.0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("这就是说，JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。容易造成混淆的是，某些运算只有整数才能完成，此时 JavaScript 会自动把64位浮点数，转成32位整数，然后再进行运算，参见《运算符》一章的”位运算“部分。")]),a("p",[t._v("由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0.3")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("0.3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0.1")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 2.9999999999999996")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0.3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0.2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0.1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("h3",{attrs:{id:"数值精度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值精度","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值精度")]),a("p",[t._v("根据国际标准 IEEE 754，JavaScript 浮点数的64个二进制位，从最左边开始，是这样组成的。")]),a("ul",[a("li",[t._v("第1位：符号位，"),a("code",[t._v("0")]),t._v("表示正数，"),a("code",[t._v("1")]),t._v("表示负数")]),a("li",[t._v("第2位到第12位（共11位）：指数部分")]),a("li",[t._v("第13位到第64位（共52位）：小数部分（即有效数字）")])]),a("p",[t._v("符号位决定了一个数的正负，指数部分决定了数值的大小，小数部分决定了数值的精度。")]),a("p",[t._v("指数部分一共有11个二进制位，因此大小范围就是0到2047。IEEE 754 规定，如果指数部分的值在0到2047之间（不含两个端点），那么有效数字的第一位默认总是1，不保存在64位浮点数之中。也就是说，有效数字这时总是"),a("code",[t._v("1.xx...xx")]),t._v("的形式，其中"),a("code",[t._v("xx..xx")]),t._v("的部分保存在64位浮点数之中，最长可能为52位。因此，JavaScript 提供的有效数字最长为53个二进制位。")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(-1)^符号位 * 1.xx...xx * 2^指数部分\n")])]),a("p",[t._v("上面公式是正常情况下（指数部分在0到2047之间），一个数在 JavaScript 内部实际的表示形式。")]),a("p",[t._v("精度最多只能到53个二进制位，这意味着，绝对值小于等于2的53次方的整数，即-2"),a("sup",[t._v("53")]),t._v("到2"),a("sup",[t._v("53")]),t._v("，都可以精确表示。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("53")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 9007199254740992")]),t._v("\n \nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("53")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 9007199254740992")]),t._v("\n\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("53")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 9007199254740994")]),t._v("\n\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("53")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 9007199254740996")]),t._v("\n\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("53")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 9007199254740996")]),t._v("\n")])]),a("p",[t._v("上面代码中，大于2的53次方以后，整数运算的结果开始出现错误。所以，大于2的53次方的数值，都无法保持精度。由于2的53次方是一个16位的十进制数值，所以简单的法则就是，JavaScript 对15位的十进制数都可以精确处理。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("53")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 9007199254740992")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 多出的三个有效数字，将无法保存")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("9007199254740992111")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 9007199254740992000")]),t._v("\n")])]),a("p",[t._v("上面示例表明，大于2的53次方以后，多出来的有效数字（最后三位的"),a("code",[t._v("111")]),t._v("）都会无法保存，变成0。")]),a("h3",{attrs:{id:"数值范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值范围","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值范围")]),a("p",[t._v("根据标准，64位浮点数的指数部分的长度是11个二进制位，意味着指数部分的最大值是2047（2的11次方减1）。也就是说，64位浮点数的指数部分的值最大为2047，分出一半表示负数，则 JavaScript 能够表示的数值范围为2"),a("sup",[t._v("1024")]),t._v("到2"),a("sup",[t._v("-1023")]),t._v("（开区间），超出这个范围的数无法表示。")]),a("p",[t._v("如果一个数大于等于2的1024次方，那么就会发生“正向溢出”，即 JavaScript 无法表示这么大的数，这时就会返回"),a("code",[t._v("Infinity")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1024")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])]),a("p",[t._v("如果一个数小于等于2的-1075次方（指数部分最小值-1023，再加上小数部分的52位），那么就会发生为“负向溢出”，即 JavaScript 无法表示这么小的数，这时会直接返回0。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1075")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])]),a("p",[t._v("下面是一个实际的例子。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0.5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("25")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nx "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])]),a("p",[t._v("上面代码中，对"),a("code",[t._v("0.5")]),t._v("连续做25次平方，由于最后结果太接近0，超出了可表示的范围，JavaScript 就直接将其转为0。")]),a("p",[t._v("JavaScript 提供"),a("code",[t._v("Number")]),t._v("对象的"),a("code",[t._v("MAX_VALUE")]),t._v("和"),a("code",[t._v("MIN_VALUE")]),t._v("属性，返回可以表示的具体的最大值和最小值。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Number"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1.7976931348623157e+308")]),t._v("\nNumber"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 5e-324")]),t._v("\n")])]),a("h2",{attrs:{id:"数值的表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值的表示法","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值的表示法")]),a("p",[t._v("JavaScript 的数值有多种表示方法，可以用字面形式直接表示，比如"),a("code",[t._v("35")]),t._v("（十进制）和"),a("code",[t._v("0xFF")]),t._v("（十六进制）。")]),a("p",[t._v("数值也可以采用科学计数法表示，下面是几个科学计数法的例子。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("123e3")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 123000")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("123e-3")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0.123")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("3.1E+12")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v(".1e-23")]),t._v("\n")])]),a("p",[t._v("科学计数法允许字母"),a("code",[t._v("e")]),t._v("或"),a("code",[t._v("E")]),t._v("的后面，跟着一个整数，表示这个数值的指数部分。")]),a("p",[t._v("以下两种情况，JavaScript 会自动将数值转为科学计数法表示，其他情况都采用字面形式直接表示。")]),a("p",[a("strong",[t._v("（1）小数点前的数字多于21位。")])]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("1234567890123456789012")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 1.2345678901234568e+21")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("123456789012345678901")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 123456789012345680000")]),t._v("\n")])]),a("p",[a("strong",[t._v("（2）小数点后的零多于5个。")])]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 小数点后紧跟5个以上的零，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 就自动转为科学计数法")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0.0000003")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3e-7")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 否则，就保持原来的字面形式")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0.000003")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0.000003")]),t._v("\n")])]),a("h2",{attrs:{id:"数值的进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值的进制","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值的进制")]),a("p",[t._v("使用字面量（literal）直接表示一个数值时，JavaScript 对整数提供四种进制的表示方法：十进制、十六进制、八进制、二进制。")]),a("ul",[a("li",[t._v("十进制：没有前导0的数值。")]),a("li",[t._v("八进制：有前缀"),a("code",[t._v("0o")]),t._v("或"),a("code",[t._v("0O")]),t._v("的数值，或者有前导0、且只用到0-7的八个阿拉伯数字的数值。")]),a("li",[t._v("十六进制：有前缀"),a("code",[t._v("0x")]),t._v("或"),a("code",[t._v("0X")]),t._v("的数值。")]),a("li",[t._v("二进制：有前缀"),a("code",[t._v("0b")]),t._v("或"),a("code",[t._v("0B")]),t._v("的数值。")])]),a("p",[t._v("默认情况下，JavaScript 内部会自动将八进制、十六进制、二进制转为十进制。下面是一些例子。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("0xff")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 255")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0o377")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 255")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0b11")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])]),a("p",[t._v("如果八进制、十六进制、二进制的数值里面，出现不属于该进制的数字，就会报错。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("xzz "),a("span",{attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("o88 "),a("span",{attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("b22 "),a("span",{attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])]),a("p",[t._v("上面代码中，十六进制出现了字母"),a("code",[t._v("z")]),t._v("、八进制出现数字"),a("code",[t._v("8")]),t._v("、二进制出现数字"),a("code",[t._v("2")]),t._v("，因此报错。")]),a("p",[t._v("通常来说，有前导0的数值会被视为八进制，但是如果前导0后面有数字"),a("code",[t._v("8")]),t._v("和"),a("code",[t._v("9")]),t._v("，则该数值被视为十进制。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("0888")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 888")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0777")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 511")]),t._v("\n")])]),a("p",[t._v("前导0表示八进制，处理时很容易造成混乱。ES5 的严格模式和 ES6，已经废除了这种表示法，但是浏览器为了兼容以前的代码，目前还继续支持这种表示法。")]),a("h2",{attrs:{id:"特殊数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊数值","aria-hidden":"true"}},[t._v("#")]),t._v(" 特殊数值")]),a("p",[t._v("JavaScript 提供了几个特殊的数值。")]),a("h3",{attrs:{id:"正零和负零"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正零和负零","aria-hidden":"true"}},[t._v("#")]),t._v(" 正零和负零")]),a("p",[t._v("前面说过，JavaScript 的64位浮点数之中，有一个二进制位是符号位。这意味着，任何一个数都有一个对应的负值，就连"),a("code",[t._v("0")]),t._v("也不例外。")]),a("p",[t._v("JavaScript 内部实际上存在2个"),a("code",[t._v("0")]),t._v("：一个是"),a("code",[t._v("+0")]),t._v("，一个是"),a("code",[t._v("-0")]),t._v("，区别就是64位浮点数表示法的符号位不同。它们是等价的。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("几乎所有场合，正零和负零都会被当作正常的"),a("code",[t._v("0")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toString")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// '0'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toString")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// '0'")]),t._v("\n")])]),a("p",[t._v("唯一有区别的场合是，"),a("code",[t._v("+0")]),t._v("或"),a("code",[t._v("-0")]),t._v("当作分母，返回的值是不相等的。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[t._v("上面的代码之所以出现这样结果，是因为除以正零得到"),a("code",[t._v("+Infinity")]),t._v("，除以负零得到"),a("code",[t._v("-Infinity")]),t._v("，这两者是不相等的（关于"),a("code",[t._v("Infinity")]),t._v("详见下文）。")]),a("h3",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan","aria-hidden":"true"}},[t._v("#")]),t._v(" NaN")]),a("p",[a("strong",[t._v("（1）含义")])]),a("p",[a("code",[t._v("NaN")]),t._v("是 JavaScript 的特殊值，表示“非数字”（Not a Number），主要出现在将字符串解析成数字出错的场合。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'x'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("p",[t._v("上面代码运行时，会自动将字符串"),a("code",[t._v("x")]),t._v("转为数值，但是由于"),a("code",[t._v("x")]),t._v("不是数值，所以最后得到结果为"),a("code",[t._v("NaN")]),t._v("，表示它是“非数字”（"),a("code",[t._v("NaN")]),t._v("）。")]),a("p",[t._v("另外，一些数学函数的运算结果会出现"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("acos")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("sqrt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("p",[a("code",[t._v("0")]),t._v("除以"),a("code",[t._v("0")]),t._v("也会得到"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("p",[t._v("需要注意的是，"),a("code",[t._v("NaN")]),t._v("不是独立的数据类型，而是一个特殊数值，它的数据类型依然属于"),a("code",[t._v("Number")]),t._v("，使用"),a("code",[t._v("typeof")]),t._v("运算符可以看得很清楚。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n")])]),a("p",[a("strong",[t._v("（2）运算规则")])]),a("p",[a("code",[t._v("NaN")]),t._v("不等于任何值，包括它本身。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[t._v("数组的"),a("code",[t._v("indexOf")]),t._v("方法内部使用的是严格相等运算符，所以该方法对"),a("code",[t._v("NaN")]),t._v("不成立。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// -1")]),t._v("\n")])]),a("p",[a("code",[t._v("NaN")]),t._v("在布尔运算时被当作"),a("code",[t._v("false")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[a("code",[t._v("NaN")]),t._v("与任何数（包括它自己）的运算，得到的都是"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("32")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("32")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("32")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("32")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("h3",{attrs:{id:"infinity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infinity","aria-hidden":"true"}},[t._v("#")]),t._v(" Infinity")]),a("p",[a("strong",[t._v("（1）含义")])]),a("p",[a("code",[t._v("Infinity")]),t._v("表示“无穷”，用来表示两种场景。一种是一个正的数值太大，或一个负的数值太小，无法表示；另一种是非0数值除以0，得到"),a("code",[t._v("Infinity")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 场景一")]),t._v("\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1024")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 场景二")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])]),a("p",[t._v("上面代码中，第一个场景是一个表达式的计算结果太大，超出了能够表示的范围，因此返回"),a("code",[t._v("Infinity")]),t._v("。第二个场景是"),a("code",[t._v("0")]),t._v("除以"),a("code",[t._v("0")]),t._v("会得到"),a("code",[t._v("NaN")]),t._v("，而非0数值除以"),a("code",[t._v("0")]),t._v("，会返回"),a("code",[t._v("Infinity")]),t._v("。")]),a("p",[a("code",[t._v("Infinity")]),t._v("有正负之分，"),a("code",[t._v("Infinity")]),t._v("表示正的无穷，"),a("code",[t._v("-Infinity")]),t._v("表示负的无穷。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// -Infinity")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])]),a("p",[t._v("上面代码中，非零正数除以"),a("code",[t._v("-0")]),t._v("，会得到"),a("code",[t._v("-Infinity")]),t._v("，负数除以"),a("code",[t._v("-0")]),t._v("，会得到"),a("code",[t._v("Infinity")]),t._v("。")]),a("p",[t._v("由于数值正向溢出（overflow）、负向溢出（underflow）和被"),a("code",[t._v("0")]),t._v("除，JavaScript 都不报错，而是返回"),a("code",[t._v("Infinity")]),t._v("，所以单纯的数学运算几乎没有可能抛出错误。")]),a("p",[a("code",[t._v("Infinity")]),t._v("大于一切数值（除了"),a("code",[t._v("NaN")]),t._v("），"),a("code",[t._v("-Infinity")]),t._v("小于一切数值（除了"),a("code",[t._v("NaN")]),t._v("）。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[a("code",[t._v("Infinity")]),t._v("与"),a("code",[t._v("NaN")]),t._v("比较，总是返回"),a("code",[t._v("false")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[a("strong",[t._v("（2）运算规则")])]),a("p",[a("code",[t._v("Infinity")]),t._v("的四则运算，符合无穷的数学计算规则。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// -Infinity")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])]),a("p",[t._v("0乘以"),a("code",[t._v("Infinity")]),t._v("，返回"),a("code",[t._v("NaN")]),t._v("；0除以"),a("code",[t._v("Infinity")]),t._v("，返回"),a("code",[t._v("0")]),t._v("；"),a("code",[t._v("Infinity")]),t._v("除以0，返回"),a("code",[t._v("Infinity")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])]),a("p",[a("code",[t._v("Infinity")]),t._v("加上或乘以"),a("code",[t._v("Infinity")]),t._v("，返回的还是"),a("code",[t._v("Infinity")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])]),a("p",[a("code",[t._v("Infinity")]),t._v("减去或除以"),a("code",[t._v("Infinity")]),t._v("，得到"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("p",[a("code",[t._v("Infinity")]),t._v("与"),a("code",[t._v("null")]),t._v("计算时，"),a("code",[t._v("null")]),t._v("会转成0，等同于与"),a("code",[t._v("0")]),t._v("的计算。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n")])]),a("p",[a("code",[t._v("Infinity")]),t._v("与"),a("code",[t._v("undefined")]),t._v("计算，返回的都是"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("undefined "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nundefined "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nundefined "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\nundefined "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" undefined "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("h2",{attrs:{id:"与数值相关的全局方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与数值相关的全局方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 与数值相关的全局方法")]),a("h3",{attrs:{id:"parseint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseint","aria-hidden":"true"}},[t._v("#")]),t._v(" parseInt()")]),a("p",[a("strong",[t._v("（1）基本用法")])]),a("p",[a("code",[t._v("parseInt")]),t._v("方法用于将字符串转为整数。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'123'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n")])]),a("p",[t._v("如果字符串头部有空格，空格会被自动去除。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'   81'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 81")]),t._v("\n")])]),a("p",[t._v("如果"),a("code",[t._v("parseInt")]),t._v("的参数不是字符串，则会先转为字符串再转换。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1.23")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1.23'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])]),a("p",[t._v("字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'8a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'12**'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'12.34'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'15e2'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'15px'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 15")]),t._v("\n")])]),a("p",[t._v("上面代码中，"),a("code",[t._v("parseInt")]),t._v("的参数都是字符串，结果只返回字符串头部可以转为数字的部分。")]),a("p",[t._v("如果字符串的第一个字符不能转化为数字（后面跟着数字的正负号除外），返回"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'.3'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'+'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])]),a("p",[t._v("所以，"),a("code",[t._v("parseInt")]),t._v("的返回值只有两种可能，要么是一个十进制整数，要么是"),a("code",[t._v("NaN")]),t._v("。")]),a("p",[t._v("如果字符串以"),a("code",[t._v("0x")]),t._v("或"),a("code",[t._v("0X")]),t._v("开头，"),a("code",[t._v("parseInt")]),t._v("会将其按照十六进制数解析。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'0x10'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 16")]),t._v("\n")])]),a("p",[t._v("如果字符串以"),a("code",[t._v("0")]),t._v("开头，将其按照10进制解析。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'011'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 11")]),t._v("\n")])]),a("p",[t._v("对于那些会自动转为科学计数法的数字，"),a("code",[t._v("parseInt")]),t._v("会将科学计数法的表示方法视为字符串，因此导致一些奇怪的结果。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1000000000000000000000.5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1e+21'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0.0000008")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'8e-7'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n")])]),a("p",[a("strong",[t._v("（2）进制转换")])]),a("p",[a("code",[t._v("parseInt")]),t._v("方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，"),a("code",[t._v("parseInt")]),t._v("的第二个参数为10，即默认是十进制转十进制。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1000'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1000")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1000'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1000")]),t._v("\n")])]),a("p",[t._v("下面是转换指定进制的数的例子。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1000'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1000'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("6")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 216")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1000'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("8")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n")])]),a("p",[t._v("上面代码中，二进制、六进制、八进制的"),a("code",[t._v("1000")]),t._v("，分别等于十进制的8、216和512。这意味着，可以用"),a("code",[t._v("parseInt")]),t._v("方法进行进制的转换。")]),a("p",[t._v("如果第二个参数不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回"),a("code",[t._v("NaN")]),t._v("。如果第二个参数是"),a("code",[t._v("0")]),t._v("、"),a("code",[t._v("undefined")]),t._v("和"),a("code",[t._v("null")]),t._v("，则直接忽略。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'10'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("37")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'10'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'10'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'10'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'10'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])]),a("p",[t._v("如果字符串包含对于指定进制无意义的字符，则从最高位开始，只返回可以转换的数值。如果最高位无法转换，则直接返回"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1546'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'546'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("p",[t._v("上面代码中，对于二进制来说，"),a("code",[t._v("1")]),t._v("是有意义的字符，"),a("code",[t._v("5")]),t._v("、"),a("code",[t._v("4")]),t._v("、"),a("code",[t._v("6")]),t._v("都是无意义的字符，所以第一行返回1，第二行返回"),a("code",[t._v("NaN")]),t._v("。")]),a("p",[t._v("前面说过，如果"),a("code",[t._v("parseInt")]),t._v("的第一个参数不是字符串，会被先转为字符串。这会导致一些令人意外的结果。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0x11")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("36")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 43")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0x11")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("String")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0x11")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("36")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("String")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0x11")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'17'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("36")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'17'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("上面代码中，十六进制的"),a("code",[t._v("0x11")]),t._v("会被先转为十进制的17，再转为字符串。然后，再用36进制或二进制解读字符串"),a("code",[t._v("17")]),t._v("，最后返回结果"),a("code",[t._v("43")]),t._v("和"),a("code",[t._v("1")]),t._v("。")]),a("p",[t._v("这种处理方式，对于八进制的前缀0，尤其需要注意。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("011")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("String")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("011")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("String")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("9")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("上面代码中，第一行的"),a("code",[t._v("011")]),t._v("会被先转为字符串"),a("code",[t._v("9")]),t._v("，因为"),a("code",[t._v("9")]),t._v("不是二进制的有效字符，所以返回"),a("code",[t._v("NaN")]),t._v("。如果直接计算"),a("code",[t._v("parseInt('011', 2)")]),t._v("，"),a("code",[t._v("011")]),t._v("则是会被当作二进制处理，返回3。")]),a("p",[t._v("JavaScript 不再允许将带有前缀0的数字视为八进制数，而是要求忽略这个"),a("code",[t._v("0")]),t._v("。但是，为了保证兼容性，大部分浏览器并没有部署这一条规定。")]),a("h3",{attrs:{id:"parsefloat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsefloat","aria-hidden":"true"}},[t._v("#")]),t._v(" parseFloat()")]),a("p",[a("code",[t._v("parseFloat")]),t._v("方法用于将一个字符串转为浮点数。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'3.14'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3.14")]),t._v("\n")])]),a("p",[t._v("如果字符串符合科学计数法，则会进行相应的转换。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'314e-2'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3.14")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'0.0314E+2'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3.14")]),t._v("\n")])]),a("p",[t._v("如果字符串包含不能转为浮点数的字符，则不再进行往后转换，返回已经转好的部分。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'3.14more non-digit characters'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3.14")]),t._v("\n")])]),a("p",[a("code",[t._v("parseFloat")]),t._v("方法会自动过滤字符串前导的空格。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\t\\v\\r12.34\\n '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 12.34")]),t._v("\n")])]),a("p",[t._v("如果参数不是字符串，或者字符串的第一个字符不能转化为浮点数，则返回"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'FF2'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("p",[t._v("上面代码中，尤其值得注意，"),a("code",[t._v("parseFloat")]),t._v("会将空字符串转为"),a("code",[t._v("NaN")]),t._v("。")]),a("p",[t._v("这些特点使得"),a("code",[t._v("parseFloat")]),t._v("的转换结果不同于"),a("code",[t._v("Number")]),t._v("函数。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'123.45#'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 123.45")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'123.45#'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),a("h3",{attrs:{id:"isnan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isnan","aria-hidden":"true"}},[t._v("#")]),t._v(" isNaN()")]),a("p",[a("code",[t._v("isNaN")]),t._v("方法可以用来判断一个值是否为"),a("code",[t._v("NaN")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("123")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[t._v("但是，"),a("code",[t._v("isNaN")]),t._v("只对数值有效，如果传入其他值，会被先转成数值。比如，传入字符串的时候，字符串会被先转成"),a("code",[t._v("NaN")]),t._v("，所以最后返回"),a("code",[t._v("true")]),t._v("，这一点要特别引起注意。也就是说，"),a("code",[t._v("isNaN")]),t._v("为"),a("code",[t._v("true")]),t._v("的值，有可能不是"),a("code",[t._v("NaN")]),t._v("，而是一个字符串。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Hello'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相当于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Hello'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("出于同样的原因，对于对象和数组，"),a("code",[t._v("isNaN")]),t._v("也返回"),a("code",[t._v("true")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'xzy'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'xzy'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("但是，对于空数组和只有一个数值成员的数组，"),a("code",[t._v("isNaN")]),t._v("返回"),a("code",[t._v("false")]),t._v("。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("123")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'123'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),a("p",[t._v("上面代码之所以返回"),a("code",[t._v("false")]),t._v("，原因是这些数组能被"),a("code",[t._v("Number")]),t._v("函数转成数值，请参见《数据类型转换》一章。")]),a("p",[t._v("因此，使用"),a("code",[t._v("isNaN")]),t._v("之前，最好判断一下数据类型。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("myIsNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'number'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("判断"),a("code",[t._v("NaN")]),t._v("更可靠的方法是，利用"),a("code",[t._v("NaN")]),t._v("为唯一不等于自身的值的这个特点，进行判断。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("myIsNaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("h3",{attrs:{id:"isfinite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isfinite","aria-hidden":"true"}},[t._v("#")]),t._v(" isFinite()")]),a("p",[a("code",[t._v("isFinite")]),t._v("方法返回一个布尔值，表示某个值是否为正常的数值。")]),a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("isFinite")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isFinite")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("Infinity")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isFinite")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isFinite")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isFinite")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isFinite")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),a("p",[t._v("除了"),a("code",[t._v("Infinity")]),t._v("、"),a("code",[t._v("-Infinity")]),t._v("、"),a("code",[t._v("NaN")]),t._v("和"),a("code",[t._v("undefined")]),t._v("这几个值会返回"),a("code",[t._v("false")]),t._v("，"),a("code",[t._v("isFinite")]),t._v("对于其他的数值都会返回"),a("code",[t._v("true")]),t._v("。")])])}],!1,null,null,null);s.default=e.exports}}]);